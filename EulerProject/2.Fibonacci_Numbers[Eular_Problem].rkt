;our problem
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

(define upper 4000000)

;; From SICP, try to under stand it
;; Link : http://www.billthelizard.com/2010/01/sicp-exercise-119-computing-fibonacci.html
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   (+ (* p p) (* q q))     ; compute p'
                   (+ (* 2 p q) (* q q))   ; compute q'
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))

(define (fib-sum init-val last-val ans)
  "sum the even fib number till last bound
init-val => start from
last-val => end when reach
ans => make it zero (used to make tail recursion)"
  (let ([init (fib init-val)])
    (if (>= init last-val)
        ans
        (if (even? init)
            (fib-sum (+ init-val 1) (+ ans init))
            (fib-sum (+ init-val 1) ans)))))
